#include "keccak_test_vectors.hpp"
#include "misc/util.hpp"

std::vector<perm_vector> theta_vectors()
{
    std::vector<perm_vector> vectors;

    // round 0
    vectors.push_back({{{
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    }}, {{
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    }},
        0
    });

    // round 1
    vectors.push_back({{{
        0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    }}, {{
        0x0000000000000001, 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002,
        0x0000000000000000, 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002,
        0x0000000000000000, 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002,
        0x0000000000000000, 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002,
        0x0000000000000000, 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002,
    }},
        1
    });

    // round 2
    vectors.push_back({{{
        0x0000000000008083, 0x0000100000000000, 0x0000000000008000, 0x0000000000000001, 0x0000100000008000,
        0x0000000000000000, 0x0000200000200000, 0x0000000000000000, 0x0000200000000000, 0x0000000000200000,
        0x0000000000000002, 0x0000000000000200, 0x0000000000000000, 0x0000000000000202, 0x0000000000000000,
        0x0000000010000400, 0x0000000000000000, 0x0000000000000400, 0x0000000010000000, 0x0000000000000000,
        0x0000010000000000, 0x0000000000000000, 0x0000010000000004, 0x0000000000000000, 0x0000000000000004,
    }}, {{
        0x0000700000600487, 0x0000130010018C89, 0x0000700020208606, 0x000021000041840D, 0x0000320030018B01,
        0x0000700000608404, 0x0000230010218C89, 0x0000700020200606, 0x000001000041840C, 0x0000220030210B01,
        0x0000700000608406, 0x0000030010018E89, 0x0000700020200606, 0x000021000041860E, 0x0000220030010B01,
        0x0000700010608004, 0x0000030010018C89, 0x0000700020200206, 0x000021001041840C, 0x0000220030010B01,
        0x0000710000608404, 0x0000030010018C89, 0x0000710020200602, 0x000021000041840C, 0x0000220030010B05,
    }},
        2
    });

    // round 3
    vectors.push_back({{{
        0x8030500001E0840C, 0x38CA983082300106, 0x08B0340041C14101, 0x2002783081A00483, 0x10488C0040D14100,
        0x00049840D3042220, 0x11932210B0700202, 0x40038E20070020F0, 0x31953040D0600010, 0x60030C30241400C2,
        0x0000A50434031950, 0x003E0038090A8080, 0xC400828E0C100043, 0x0022263021081812, 0xC41C018A18108081,
        0x01840C580E382590, 0x3E08505001060000, 0x040C0061063A6584, 0x39801C4809030010, 0x0A08402100074184,
        0x80859C8008192199, 0xC700080080E020E2, 0x008584804017321C, 0x4100180008E801A1, 0x06000C00C0063266,
    }}, {{
        0x98B0590AC86D7060, 0x298A1D327B0ED626, 0x0AB50258192BD807, 0xD8875F48F4F557EA, 0x7B161D31F07F2ADA,
        0x1884914A1A89D64C, 0x00D3A712494ED522, 0x4206B8785FEAB9F6, 0xC9101738A5355379, 0x0B5D9D0194BA6B18,
        0x1880AC0EFD8EED3C, 0x117E853AF03457A0, 0xC605B4D654FA9945, 0xF8A70148545D4B7B, 0xAF4290BBA8BEEB5B,
        0x19040552C7B5D1FC, 0x2F48D552F838D720, 0x060936395ED0FC82, 0xC1053B307C565379, 0x6156D110B0A92A5E,
        0x9805958AC194D5F5, 0xD6408D0279DEF7C2, 0x0280B2D818FDAB1A, 0xB9853F787DBD52C8, 0x6D5E9D3170A859BC,
    }},
        3
    });

    return vectors;
}


std::vector<perm_vector> rho_pi_vectors()
{
    std::vector<perm_vector> vectors;

    // round 0
    vectors.push_back({{{
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    }}, {{
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    }},
        0
    });

    // round 1
    vectors.push_back({{{
        0x0000000000000001, 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002,
        0x0000000000000000, 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002,
        0x0000000000000000, 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002,
        0x0000000000000000, 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002,
        0x0000000000000000, 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002,
    }}, {{
        0x0000000000000001, 0x0000100000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000008000,
        0x0000000000000000, 0x0000000000200000, 0x0000000000000000, 0x0000200000000000, 0x0000000000000000,
        0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000200, 0x0000000000000000,
        0x0000000010000000, 0x0000000000000000, 0x0000000000000400, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000010000000000, 0x0000000000000000, 0x0000000000000004,
    }},
        1
    });

    // round 2
    vectors.push_back({{{
        0x0000700000600487, 0x0000130010018C89, 0x0000700020208606, 0x000021000041840D, 0x0000320030018B01,
        0x0000700000608404, 0x0000230010218C89, 0x0000700020200606, 0x000001000041840C, 0x0000220030210B01,
        0x0000700000608406, 0x0000030010018E89, 0x0000700020200606, 0x000021000041860E, 0x0000220030010B01,
        0x0000700010608004, 0x0000030010018C89, 0x0000700020200206, 0x000021001041840C, 0x0000220030010B01,
        0x0000710000608404, 0x0000030010018C89, 0x0000710020200602, 0x000021000041840C, 0x0000220030010B05,
    }}, {{
        0x0000700000600487, 0x18C8900002300102, 0x0030300003800101, 0x2002083081800004, 0x08800C0042C14000,
        0x00041840D0000210, 0x20030210B0100002, 0x0003800003042030, 0x3191200000600200, 0x40000E20040400C0,
        0x0000260020031912, 0x001C000808018180, 0x0000830C1C000042, 0x00220030010B0100, 0xC400018210100001,
        0x01800C5808000190, 0x0608404000070000, 0x000C0040063A2400, 0x3800101001030000, 0x0C00002100004184,
        0x80001C0008082181, 0x06000000800020C2, 0x0085808000110018, 0xC100080000E00020, 0x00000C0040063224,
    }},
        2
    });

    // round 3
    vectors.push_back({{{
        0x98B0590AC86D7060, 0x298A1D327B0ED626, 0x0AB50258192BD807, 0xD8875F48F4F557EA, 0x7B161D31F07F2ADA,
        0x1884914A1A89D64C, 0x00D3A712494ED522, 0x4206B8785FEAB9F6, 0xC9101738A5355379, 0x0B5D9D0194BA6B18,
        0x1880AC0EFD8EED3C, 0x117E853AF03457A0, 0xC605B4D654FA9945, 0xF8A70148545D4B7B, 0xAF4290BBA8BEEB5B,
        0x19040552C7B5D1FC, 0x2F48D552F838D720, 0x060936395ED0FC82, 0xC1053B307C565379, 0x6156D110B0A92A5E,
        0x9805958AC194D5F5, 0xD6408D0279DEF7C2, 0x0280B2D818FDAB1A, 0xB9853F787DBD52C8, 0x6D5E9D3170A859BC,
    }}, {{
        0x98B0590AC86D7060, 0xED52200D3A712494, 0xD4CA2E302DA6B2A7, 0x660F8ACA6F3820A7, 0xA74C5C2A166F1B57,
        0x8F4F557EAD8875F4, 0xD0194BA6B180B5D9, 0xC4056077EC7769E0, 0x1AE405E91AAA5F07, 0x4050165B031FB563,
        0x53143A64F61DAC4C, 0x81AE1E17FAAE7D90, 0x90A8BA96F7F14E02, 0x56D110B0A92A5E61, 0x562B065357D66016,
        0x8F83F956D3D8B0E9, 0xA89D64C1884914A1, 0xFA14EBC0D15E8045, 0x9B1CAF687E410304, 0xC8B9853F787DBD52,
        0xC2AD4096064AF601, 0xBCE4880B9C529AA9, 0x5F75ADD7A1485DD4, 0x6BA3F832080AA58F, 0x59023409E77BDF0B,
    }},
        3
    });

    return vectors;
}


std::vector<perm_vector> chi_vectors()
{
    std::vector<perm_vector> vectors;

    // round 0
    vectors.push_back({{{
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    }}, {{
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    }},
        0
    });

    // round 1
    vectors.push_back({{{
        0x0000000000000001, 0x0000100000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000008000,
        0x0000000000000000, 0x0000000000200000, 0x0000000000000000, 0x0000200000000000, 0x0000000000000000,
        0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000200, 0x0000000000000000,
        0x0000000010000000, 0x0000000000000000, 0x0000000000000400, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000010000000000, 0x0000000000000000, 0x0000000000000004,
    }}, {{
        0x0000000000000001, 0x0000100000000000, 0x0000000000008000, 0x0000000000000001, 0x0000100000008000,
        0x0000000000000000, 0x0000200000200000, 0x0000000000000000, 0x0000200000000000, 0x0000000000200000,
        0x0000000000000002, 0x0000000000000200, 0x0000000000000000, 0x0000000000000202, 0x0000000000000000,
        0x0000000010000400, 0x0000000000000000, 0x0000000000000400, 0x0000000010000000, 0x0000000000000000,
        0x0000010000000000, 0x0000000000000000, 0x0000010000000004, 0x0000000000000000, 0x0000000000000004,
    }},
        1
    });

    // round 2
    vectors.push_back({{{
        0x0000700000600487, 0x18C8900002300102, 0x0030300003800101, 0x2002083081800004, 0x08800C0042C14000,
        0x00041840D0000210, 0x20030210B0100002, 0x0003800003042030, 0x3191200000600200, 0x40000E20040400C0,
        0x0000260020031912, 0x001C000808018180, 0x0000830C1C000042, 0x00220030010B0100, 0xC400018210100001,
        0x01800C5808000190, 0x0608404000070000, 0x000C0040063A2400, 0x3800101001030000, 0x0C00002100004184,
        0x80001C0008082181, 0x06000000800020C2, 0x0085808000110018, 0xC100080000E00020, 0x00000C0040063224,
    }}, {{
        0x0030500001E00486, 0x38CA983082300106, 0x08B0340041C14101, 0x2002783081A00483, 0x10488C0040D14100,
        0x00049840D3042220, 0x11932210B0700202, 0x40038E20070020F0, 0x31953040D0600010, 0x60030C30241400C2,
        0x0000A50434031950, 0x003E0038090A8080, 0xC400828E0C100043, 0x0022263021081812, 0xC41C018A18108081,
        0x01840C580E382590, 0x3E08505001060000, 0x040C0061063A6584, 0x39801C4809030010, 0x0A08402100074184,
        0x80859C8008192199, 0xC700080080E020E2, 0x008584804017321C, 0x4100180008E801A1, 0x06000C00C0063266,
    }},
        2
    });

    // round 3
    vectors.push_back({{{
        0x98B0590AC86D7060, 0xED52200D3A712494, 0xD4CA2E302DA6B2A7, 0x660F8ACA6F3820A7, 0xA74C5C2A166F1B57,
        0x8F4F557EAD8875F4, 0xD0194BA6B180B5D9, 0xC4056077EC7769E0, 0x1AE405E91AAA5F07, 0x4050165B031FB563,
        0x53143A64F61DAC4C, 0x81AE1E17FAAE7D90, 0x90A8BA96F7F14E02, 0x56D110B0A92A5E61, 0x562B065357D66016,
        0x8F83F956D3D8B0E9, 0xA89D64C1884914A1, 0xFA14EBC0D15E8045, 0x9B1CAF687E410304, 0xC8B9853F787DBD52,
        0xC2AD4096064AF601, 0xBCE4880B9C529AA9, 0x5F75ADD7A1485DD4, 0x6BA3F832080AA58F, 0x59023409E77BDF0B,
    }}, {{
        0x8838573ACDEBE243, 0xCF57A0C778692494, 0x558A7A103DE1A9F7, 0x7EBF8BCAA7384087, 0xC20E7C2F247F1FC3,
        0x8B4B752FE1FF3DD4, 0xCAF94E2EA308A3DE, 0x84157265ED62C980, 0x95EB44CDB62A1F93, 0x10401CDB131F356A,
        0x43149AE4F34CAE4E, 0xC7FF1E37F2A46DF1, 0x9082BCD5A1256E14, 0x57C528940923D229, 0xD68102405F743186,
        0xDD83725682CE30AD, 0xA99560E9A64817A1, 0xBAB5EBD7D1623C17, 0x9C1ED728FDC103AD, 0xE8A581BE707CB952,
        0x81BC65422742B355, 0x9C66D82B94503AA2, 0x4F75A9DE463907D4, 0xE90EB8A4080A858F, 0x6542BC007F6BD7A3,
    }},
        3
    });

    return vectors;
}


std::vector<perm_vector> iota_vectors()
{
    std::vector<perm_vector> vectors;

    // round 0
    vectors.push_back({{{
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    }}, {{
        0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    }},
        0
    });

    // round 1
    vectors.push_back({{{
        0x0000000000000001, 0x0000100000000000, 0x0000000000008000, 0x0000000000000001, 0x0000100000008000,
        0x0000000000000000, 0x0000200000200000, 0x0000000000000000, 0x0000200000000000, 0x0000000000200000,
        0x0000000000000002, 0x0000000000000200, 0x0000000000000000, 0x0000000000000202, 0x0000000000000000,
        0x0000000010000400, 0x0000000000000000, 0x0000000000000400, 0x0000000010000000, 0x0000000000000000,
        0x0000010000000000, 0x0000000000000000, 0x0000010000000004, 0x0000000000000000, 0x0000000000000004,
    }}, {{
        0x0000000000008083, 0x0000100000000000, 0x0000000000008000, 0x0000000000000001, 0x0000100000008000,
        0x0000000000000000, 0x0000200000200000, 0x0000000000000000, 0x0000200000000000, 0x0000000000200000,
        0x0000000000000002, 0x0000000000000200, 0x0000000000000000, 0x0000000000000202, 0x0000000000000000,
        0x0000000010000400, 0x0000000000000000, 0x0000000000000400, 0x0000000010000000, 0x0000000000000000,
        0x0000010000000000, 0x0000000000000000, 0x0000010000000004, 0x0000000000000000, 0x0000000000000004,
    }},
        1
    });

    // round 2
    vectors.push_back({{{
        0x0030500001E00486, 0x38CA983082300106, 0x08B0340041C14101, 0x2002783081A00483, 0x10488C0040D14100,
        0x00049840D3042220, 0x11932210B0700202, 0x40038E20070020F0, 0x31953040D0600010, 0x60030C30241400C2,
        0x0000A50434031950, 0x003E0038090A8080, 0xC400828E0C100043, 0x0022263021081812, 0xC41C018A18108081,
        0x01840C580E382590, 0x3E08505001060000, 0x040C0061063A6584, 0x39801C4809030010, 0x0A08402100074184,
        0x80859C8008192199, 0xC700080080E020E2, 0x008584804017321C, 0x4100180008E801A1, 0x06000C00C0063266,
    }}, {{
        0x8030500001E0840C, 0x38CA983082300106, 0x08B0340041C14101, 0x2002783081A00483, 0x10488C0040D14100,
        0x00049840D3042220, 0x11932210B0700202, 0x40038E20070020F0, 0x31953040D0600010, 0x60030C30241400C2,
        0x0000A50434031950, 0x003E0038090A8080, 0xC400828E0C100043, 0x0022263021081812, 0xC41C018A18108081,
        0x01840C580E382590, 0x3E08505001060000, 0x040C0061063A6584, 0x39801C4809030010, 0x0A08402100074184,
        0x80859C8008192199, 0xC700080080E020E2, 0x008584804017321C, 0x4100180008E801A1, 0x06000C00C0063266,
    }},
        2
    });

    // round 3
    vectors.push_back({{{
        0x8838573ACDEBE243, 0xCF57A0C778692494, 0x558A7A103DE1A9F7, 0x7EBF8BCAA7384087, 0xC20E7C2F247F1FC3,
        0x8B4B752FE1FF3DD4, 0xCAF94E2EA308A3DE, 0x84157265ED62C980, 0x95EB44CDB62A1F93, 0x10401CDB131F356A,
        0x43149AE4F34CAE4E, 0xC7FF1E37F2A46DF1, 0x9082BCD5A1256E14, 0x57C528940923D229, 0xD68102405F743186,
        0xDD83725682CE30AD, 0xA99560E9A64817A1, 0xBAB5EBD7D1623C17, 0x9C1ED728FDC103AD, 0xE8A581BE707CB952,
        0x81BC65422742B355, 0x9C66D82B94503AA2, 0x4F75A9DE463907D4, 0xE90EB8A4080A858F, 0x6542BC007F6BD7A3,
    }}, {{
        0x0838573A4DEB6243, 0xCF57A0C778692494, 0x558A7A103DE1A9F7, 0x7EBF8BCAA7384087, 0xC20E7C2F247F1FC3,
        0x8B4B752FE1FF3DD4, 0xCAF94E2EA308A3DE, 0x84157265ED62C980, 0x95EB44CDB62A1F93, 0x10401CDB131F356A,
        0x43149AE4F34CAE4E, 0xC7FF1E37F2A46DF1, 0x9082BCD5A1256E14, 0x57C528940923D229, 0xD68102405F743186,
        0xDD83725682CE30AD, 0xA99560E9A64817A1, 0xBAB5EBD7D1623C17, 0x9C1ED728FDC103AD, 0xE8A581BE707CB952,
        0x81BC65422742B355, 0x9C66D82B94503AA2, 0x4F75A9DE463907D4, 0xE90EB8A4080A858F, 0x6542BC007F6BD7A3,
    }},
        3
    });

    return vectors;
}


std::vector<perm_vector> permutation_vectors()
{
    std::vector<perm_vector> vectors;

    vectors.push_back({{{
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    }}, {{
        0xF1258F7940E1DDE7, 0x84D5CCF933C0478A, 0xD598261EA65AA9EE, 0xBD1547306F80494D, 0x8B284E056253D057,
        0xFF97A42D7F8E6FD4, 0x90FEE5A0A44647C4, 0x8C5BDA0CD6192E76, 0xAD30A6F71B19059C, 0x30935AB7D08FFC64,
        0xEB5AA93F2317D635, 0xA9A6E6260D712103, 0x81A57C16DBCF555F, 0x43B831CD0347C826, 0x01F22F1A11A5569F,
        0x05E5635A21D9AE61, 0x64BEFEF28CC970F2, 0x613670957BC46611, 0xB87C5A554FD00ECB, 0x8C3EE88A1CCF32C8,
        0x940C7922AE3A2614, 0x1841F924A2C509E4, 0x16F53526E70465C2, 0x75F644E97F30A13B, 0xEAF1FF7B5CECA249,
    }},
        0
    });

    vectors.push_back({{{
        0xF1258F7940E1DDE7, 0x84D5CCF933C0478A, 0xD598261EA65AA9EE, 0xBD1547306F80494D, 0x8B284E056253D057,
        0xFF97A42D7F8E6FD4, 0x90FEE5A0A44647C4, 0x8C5BDA0CD6192E76, 0xAD30A6F71B19059C, 0x30935AB7D08FFC64,
        0xEB5AA93F2317D635, 0xA9A6E6260D712103, 0x81A57C16DBCF555F, 0x43B831CD0347C826, 0x01F22F1A11A5569F,
        0x05E5635A21D9AE61, 0x64BEFEF28CC970F2, 0x613670957BC46611, 0xB87C5A554FD00ECB, 0x8C3EE88A1CCF32C8,
        0x940C7922AE3A2614, 0x1841F924A2C509E4, 0x16F53526E70465C2, 0x75F644E97F30A13B, 0xEAF1FF7B5CECA249,
    }}, {{
        0x2D5C954DF96ECB3C, 0x6A332CD07057B56D, 0x093D8D1270D76B6C, 0x8A20D9B25569D094, 0x4F9C4F99E5E7F156,
        0xF957B9A2DA65FB38, 0x85773DAE1275AF0D, 0xFAF4F247C3D810F7, 0x1F1B9EE6F79A8759, 0xE4FECC0FEE98B425,
        0x68CE61B6B9CE68A1, 0xDEEA66C4BA8F974F, 0x33C43D836EAFB1F5, 0xE00654042719DBD9, 0x7CF8A9F009831265,
        0xFD5449A6BF174743, 0x97DDAD33D8994B40, 0x48EAD5FC5D0BE774, 0xE3B8C8EE55B7B03C, 0x91A0226E649E42E9,
        0x900E3129E7BADD7B, 0x202A9EC5FAA3CCE8, 0x5B3402464E1C3DB6, 0x609F4E62A44C1059, 0x20D06CD26A8FBF5C,
    }},
        1
    });

    return vectors;
}


std::vector<test_vector> sha3_256_vectors()
{
    std::vector<test_vector> vectors;


    vectors.push_back({
            string_to_bytes("abc"),
            unhexlify("3a985da74fe225b2045c172d6bd390bd855f086e3e9d525b46bfe24511431532")
    });

    vectors.push_back({
            string_to_bytes(""),
            unhexlify("a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a")
    });

    vectors.push_back({
            string_to_bytes("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"),
            unhexlify("41c0dba2a9d6240849100376a8235e2c82e1b9998a999e21db32dd97496d3376")
    });

    vectors.push_back({
            string_to_bytes("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"),
            unhexlify("916f6061fe879741ca6469b43971dfdb28b1a32dc36cb3254e812be27aad1d18")
    });

    vectors.push_back({
            bytes_t(1000000, 0x61),
            unhexlify("5c8875ae474a3634ba4fd55ec85bffd661f32aca75c6d699d0cdcb6c115891c1")
    });


    return vectors;
}


std::vector<test_vector> sha3_512_vectors()
{
    std::vector<test_vector> vectors;


    vectors.push_back({
            string_to_bytes("abc"),
            unhexlify("b751850b1a57168a5693cd924b6b096e08f621827444f70d884f5d0240d2712e10e116e9192af3c91a7ec57647e3934057340b4cf408d5a56592f8274eec53f0")
    });

    vectors.push_back({
            string_to_bytes(""),
            unhexlify("a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26")
    });

    vectors.push_back({
            string_to_bytes("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"),
            unhexlify("04a371e84ecfb5b8b77cb48610fca8182dd457ce6f326a0fd3d7ec2f1e91636dee691fbe0c985302ba1b0d8dc78c086346b533b49c030d99a27daf1139d6e75e")
    });

    vectors.push_back({
            string_to_bytes("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"),
            unhexlify("afebb2ef542e6579c50cad06d2e578f9f8dd6881d7dc824d26360feebf18a4fa73e3261122948efcfd492e74e82e2189ed0fb440d187f382270cb455f21dd185")
    });

    vectors.push_back({
            bytes_t(1000000, 'a'),
            unhexlify("3c3a876da14034ab60627c077bb98f7e120a2a5370212dffb3385a18d4f38859ed311d0a9d5141ce9cc5c66ee689b266a8aa18ace8282a0e0db596c90b0a7b87")
    });


    return vectors;
}


std::array<uint64_t, 24> round_constants_64{{
    0x0000000000000001, 0x0000000000008082, 0x800000000000808A,
    0x8000000080008000, 0x000000000000808B, 0x0000000080000001,
    0x8000000080008081, 0x8000000000008009, 0x000000000000008A,
    0x0000000000000088, 0x0000000080008009, 0x000000008000000A,
    0x000000008000808B, 0x800000000000008B, 0x8000000000008089,
    0x8000000000008003, 0x8000000000008002, 0x8000000000000080,
    0x000000000000800A, 0x800000008000000A, 0x8000000080008081,
    0x8000000000008080, 0x0000000080000001, 0x8000000080008008,
}};

std::array<uint32_t, 24> round_constants_32{{
    0x00000001, 0x00008082, 0x0000808A, 0x80008000, 0x0000808B, 0x80000001,
    0x80008081, 0x00008009, 0x0000008A, 0x00000088, 0x80008009, 0x8000000A,
    0x8000808B, 0x0000008B, 0x00008089, 0x00008003, 0x00008002, 0x00000080,
    0x0000800A, 0x8000000A, 0x80008081, 0x00008080, 0x80000001, 0x80008008,
}};

std::array<uint16_t, 24> round_constants_16{{
    0x0001, 0x8082, 0x808A, 0x8000, 0x808B, 0x0001, 0x8081, 0x8009, 0x008A,
    0x0088, 0x8009, 0x000A, 0x808B, 0x008B, 0x8089, 0x8003, 0x8002, 0x0080,
    0x800A, 0x000A, 0x8081, 0x8080, 0x0001, 0x8008,
}};

std::array<uint8_t, 24> round_constants_8{{
    0x01, 0x82, 0x8A, 0x00, 0x8B, 0x01, 0x81, 0x09, 0x8A, 0x88, 0x09, 0x0A,
    0x8B, 0x8B, 0x89, 0x03, 0x02, 0x80, 0x0A, 0x0A, 0x81, 0x80, 0x01, 0x08,
}};
