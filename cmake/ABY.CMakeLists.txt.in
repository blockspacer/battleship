cmake_minimum_required(VERSION 3.0)

project(ABY)

option(BUILD_EXE "Build executables" OFF)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_FLAGS_RELEASE "-O2 -march=native")
set(CMAKE_CXX_FLAGS_DEBUG "-std=c++17 -g3 -ggdb -O0")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address")

# Dependencies
find_package(Threads REQUIRED)
find_package(OpenSSL REQUIRED)

find_path(MIRACL_INCLUDE_DIR miracl_lib/miracl.h)
if ((NOT MIRACL_INCLUDE_DIR) OR (NOT EXISTS ${MIRACL_INCLUDE_DIR}))
    message(FATAL_ERROR "MIRACL include dir not found")
else()
    message(STATUS "Found MIRACL include dir: ${MIRACL_INCLUDE_DIR}")
endif()
find_library(MIRACL_LIBRARY libmiracl.a)
if ((NOT MIRACL_LIBRARY) OR (NOT EXISTS ${MIRACL_LIBRARY}))
    message(FATAL_ERROR "MIRACL library not found")
else()
    message(STATUS "Found MIRACL library: ${MIRACL_LIBRARY}")
endif()
find_library(MIRACL_CXX_LIBRARY libmiracl_cxx.a)
if ((NOT MIRACL_CXX_LIBRARY) OR (NOT EXISTS ${MIRACL_CXX_LIBRARY}))
    message(FATAL_ERROR "MIRACL cxx library not found")
else()
    message(STATUS "Found MIRACL cxx library: ${MIRACL_CXX_LIBRARY}")
endif()
find_library(GMP_LIBRARY gmp)
if ((NOT GMP_LIBRARY) OR (NOT EXISTS ${GMP_LIBRARY}))
    message(FATAL_ERROR "GMP not found")
else()
    message(STATUS "Found GMP: ${GMP_LIBRARY}")
endif()
find_library(GMPXX_LIBRARY gmpxx)
if ((NOT GMPXX_LIBRARY) OR (NOT EXISTS ${GMPXX_LIBRARY}))
    message(FATAL_ERROR "GMPXX not found")
else()
    message(STATUS "Found GMPXX: ${GMPXX_LIBRARY}")
endif()

find_library(OTEXTENSION_LIBRARY libotextension.a)
if ((NOT OTEXTENSION_LIBRARY) OR (NOT EXISTS ${OTEXTENSION_LIBRARY}))
    message(FATAL_ERROR "OTEXTENSION library not found")
else()
    message(STATUS "Found OTEXTENSION library: ${OTEXTENSION_LIBRARY}")
endif()
find_path(OTEXTENSION_INCLUDE_DIR ot/baseOT.h)
if ((NOT OTEXTENSION_INCLUDE_DIR) OR (NOT EXISTS ${OTEXTENSION_INCLUDE_DIR}))
    message(FATAL_ERROR "OTEXTENSION include dir not found")
else()
    message(STATUS "Found OTEXTENSION include dir: ${OTEXTENSION_INCLUDE_DIR}")
endif()

find_library(ENCRYPTO_UTILS_LIBRARY libencrypto_utils.a)
if ((NOT ENCRYPTO_UTILS_LIBRARY) OR (NOT EXISTS ${ENCRYPTO_UTILS_LIBRARY}))
    message(FATAL_ERROR "ENCRYPTO_UTILS library not found")
else()
    message(STATUS "Found ENCRYPTO_UTILS library: ${ENCRYPTO_UTILS_LIBRARY}")
endif()
find_path(ENCRYPTO_UTILS_INCLUDE_DIR ENCRYPTO_utils/utils.h)
if ((NOT ENCRYPTO_UTILS_INCLUDE_DIR) OR (NOT EXISTS ${ENCRYPTO_UTILS_INCLUDE_DIR}))
    message(FATAL_ERROR "ENCRYPTO_UTILS include dir not found")
else()
    message(STATUS "Found ENCRYPTO_UTILS include dir: ${ENCRYPTO_UTILS_INCLUDE_DIR}")
endif()


set(ABY_SOURCES
    src/abycore/aby/abyparty.cpp
    src/abycore/aby/abysetup.cpp
    src/abycore/circuit/abycircuit.cpp
    src/abycore/circuit/arithmeticcircuits.cpp
    src/abycore/circuit/booleancircuits.cpp
    src/abycore/circuit/circuit.cpp
    src/abycore/circuit/share.cpp
    src/abycore/DGK/dgkparty.cpp
    src/abycore/DJN/djnparty.cpp
    src/abycore/sharing/arithsharing.cpp
    src/abycore/sharing/boolsharing.cpp
    src/abycore/sharing/sharing.cpp
    src/abycore/sharing/splut.cpp
    src/abycore/sharing/yaoclientsharing.cpp
    src/abycore/sharing/yaoserversharing.cpp
    src/abycore/sharing/yaosharing.cpp
)

set(ABY_TEST_COMMON_SOURCES
    src/examples/aes/common/aescircuit.cpp
    src/examples/euclidean_distance/common/euclidean_dist.cpp
    src/examples/innerproduct/common/innerproduct.cpp
    src/examples/lowmc/common/lowmccircuit.cpp
    src/examples/millionaire_prob/common/millionaire_prob.cpp
    src/examples/min-euclidean-dist/common/min-euclidean-dist-circuit.cpp
    src/examples/psi_phasing/common/hashing/cuckoo.cpp
    src/examples/psi_phasing/common/hashing/simple_hashing.cpp
    src/examples/psi_phasing/common/phasing_circuit.cpp
    src/examples/psi_scs/common/sort_compare_shuffle.cpp
    src/examples/psi_scs/common/WaksmanPermutation.cpp
    src/examples/sha1/common/sha1_circuit.cpp
    src/examples/threshold_euclidean_dist_2d_simd/common/threshold-euclidean-dist.cpp
)
set(ABY_TEST_EXE_SOURCES
    src/test/abytest.cpp
    src/examples/aes/aes_test.cpp
    src/examples/bench_operations/bench_operations.cpp
    src/examples/euclidean_distance/euclidean_distance_test.cpp
    src/examples/innerproduct/innerproduct_test.cpp
    src/examples/lowmc/lowmc.cpp
    src/examples/millionaire_prob/millionaire_prob_test.cpp
    src/examples/min-euclidean-dist/min-euclidean-dist.cpp
    src/examples/psi_phasing/psi_phasing.cpp
    src/examples/psi_scs/psi_scs.cpp
    src/examples/sha1/sha1_test.cpp
    src/examples/threshold_euclidean_dist_2d_simd/threshold-euclidean-dist.cpp
)


add_library(aby ${ABY_SOURCES})
set(INCLUDES ${MIRACL_INCLUDE_DIR} ${ENCRYPTO_UTILS_INCLUDE_DIR} ${OTEXTENSION_UTILS_INCLUDE_DIR})
target_include_directories(aby PRIVATE ${INCLUDES})

install(TARGETS aby DESTINATION "lib")

install(DIRECTORY src/abycore DESTINATION include
        FILES_MATCHING PATTERN "*.h")

if(BUILD_EXE)
    set(LIBRARIES
        ${OTEXTENSION_LIBRARY}
        ${ENCRYPTO_UTILS_LIBRARY}
        ${MIRACL_CXX_LIBRARY} ${MIRACL_LIBRARY}
        ${GMP_LIBRARY} ${GMPXX_LIBRARY}
        Threads::Threads
        OpenSSL::SSL OpenSSL::Crypto
    )

    add_library(aby_test_common ${ABY_TEST_COMMON_SOURCES})
    target_include_directories(aby_test_common PRIVATE ${INCLUDES})

    foreach (filename ${ABY_TEST_EXE_SOURCES})
        get_filename_component(test_name "${filename}" NAME_WE)
        add_executable("${test_name}.exe" ${filename})
        target_include_directories("${test_name}.exe" PRIVATE ${INCLUDES})
        target_link_libraries("${test_name}.exe" aby_test_common aby ${LIBRARIES})
        install(TARGETS "${test_name}.exe" DESTINATION "bin/abytest")
    endforeach(filename)

endif(BUILD_EXE)
