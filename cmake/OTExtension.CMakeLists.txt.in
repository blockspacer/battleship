cmake_minimum_required(VERSION 3.0)

project(OTExtension)

option(BUILD_EXE "Build executables" OFF)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_FLAGS_RELEASE "-O2")
set(CMAKE_CXX_FLAGS_DEBUG "-g3 -ggdb -O0")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address")

# Dependencies
find_package(Threads REQUIRED)

find_library(MIRACL_LIBRARY libmiracl.a)
if ((NOT MIRACL_LIBRARY) OR (NOT EXISTS ${MIRACL_LIBRARY}))
    message(FATAL_ERROR "MIRACL library not found")
else()
    message(STATUS "Found MIRACL library: ${MIRACL_LIBRARY}")
endif()
find_library(MIRACL_CXX_LIBRARY libmiracl_cxx.a)
if ((NOT MIRACL_CXX_LIBRARY) OR (NOT EXISTS ${MIRACL_CXX_LIBRARY}))
    message(FATAL_ERROR "MIRACL cxx library not found")
else()
    message(STATUS "Found MIRACL cxx library: ${MIRACL_CXX_LIBRARY}")
endif()
find_path(MIRACL_INCLUDE_DIR miracl_lib/miracl.h)
if ((NOT MIRACL_INCLUDE_DIR) OR (NOT EXISTS ${MIRACL_INCLUDE_DIR}))
    message(FATAL_ERROR "MIRACL include dir not found")
else()
    message(STATUS "Found MIRACL include dir: ${MIRACL_INCLUDE_DIR}")
endif()

find_library(ENCRYPTO_UTILS_LIBRARY libencrypto_utils.a)
if ((NOT ENCRYPTO_UTILS_LIBRARY) OR (NOT EXISTS ${ENCRYPTO_UTILS_LIBRARY}))
    message(FATAL_ERROR "ENCRYPTO_UTILS library not found")
else()
    message(STATUS "Found ENCRYPTO_UTILS library: ${ENCRYPTO_UTILS_LIBRARY}")
endif()
find_path(ENCRYPTO_UTILS_INCLUDE_DIR ENCRYPTO_utils/utils.h)
if ((NOT ENCRYPTO_UTILS_INCLUDE_DIR) OR (NOT EXISTS ${ENCRYPTO_UTILS_INCLUDE_DIR}))
    message(FATAL_ERROR "ENCRYPTO_UTILS include dir not found")
else()
    message(STATUS "Found ENCRYPTO_UTILS include dir: ${ENCRYPTO_UTILS_INCLUDE_DIR}")
endif()

set(OTEXT_SOURCES
    ot/alsz-ot-ext-rec.cpp
    ot/alsz-ot-ext-snd.cpp
    ot/asharov-lindell.cpp
    ot/iknp-ot-ext-rec.cpp
    ot/iknp-ot-ext-snd.cpp
    ot/kk-ot-ext-rec.cpp
    ot/kk-ot-ext-snd.cpp
    ot/naor-pinkas.cpp
    ot/naor-pinkas_noro.cpp
    ot/nnob-ot-ext-rec.cpp
    ot/nnob-ot-ext-snd.cpp
    ot/ot-ext.cpp
    ot/ot-ext-rec.cpp
    ot/ot-ext-snd.cpp
    ot/pvwddh.cpp
    ot/simpleot.cpp
)


add_library(otextension ${OTEXT_SOURCES})
# allow relative includes: #include "../miracl_lib/...h"
target_include_directories(otextension PRIVATE ${MIRACL_INCLUDE_DIR} ${ENCRYPTO_UTILS_INCLUDE_DIR})

if (BUILD_EXE)
    set(LIBRARIES
        otextension
        ${ENCRYPTO_UTILS_LIBRARY}
        ${MIRACL_CXX_LIBRARY} ${MIRACL_LIBRARY}
        Threads::Threads ssl crypto gmp gmpxx
    )

    add_executable(ot.exe mains/otmain.cpp)
    target_include_directories(ot.exe PRIVATE ${MIRACL_INCLUDE_DIR})
    target_link_libraries(ot.exe ${LIBRARIES})
    install(TARGETS "ot.exe" DESTINATION "bin/ottest")

    add_executable(test.exe mains/test.cpp)
    target_link_libraries(test.exe ${LIBRARIES})
    target_include_directories(test.exe PRIVATE ${MIRACL_INCLUDE_DIR})
    install(TARGETS "test.exe" DESTINATION "bin/ottest")

endif (BUILD_EXE)

install(TARGETS otextension DESTINATION "lib")

install(FILES ${OTEXT_HEADER} DESTINATION "include/ot")
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/ot DESTINATION include
        FILES_MATCHING PATTERN "*.h")
install(DIRECTORY DESTINATION include/dummy_include_dir)
